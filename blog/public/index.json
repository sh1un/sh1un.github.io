[{"content":"報名流程 履歷及申請動機 本篇文章主要以「技術支援」這個角度來探討履歷準備的方向，當然！這當中肯定有很多方向也是其他職能也可以拿來參考用的。即便您第一志願不是「技術支援」職能，我仍然建議你繼續讀完！\n先來了解 Technical Support (技術支援)這個角色會做哪些事 技術工作坊上台演講並教學雲端技術 提供組內雲端技術的諮詢和建議 撰寫工作坊所需的技術教學文件及應用 履歷準備方向 了解技術支援這個角色會做哪些事，盡可能地在撰寫履歷時，使內容可以讓面試官覺得你很適合這個角色\n教學技術的經驗 上台演講的經驗 技術專案的經驗 有使用到 AWS 尤佳 內容可以和 Amazon 領導力準則掛勾 展現你在技術上的所專精的專業領域，例如：\nAI Data Analysis DevOps \u0026hellip; 展現你的 Leadership 和 Ownership\n量化你的成果\n雲端技術證照\n履歷常見錯誤 ❌ 履歷的大頭照可放可不放，但仍建議不要放，部分職位、傳統台商或特別要求則例外，原因如下： 避免因種族、膚色、人種\u0026hellip; 產生任何 Bias 篇幅過長，超過兩頁 技術方面寫的過多過雜、許多不必要的雜訊，例如： 您有提到您會 Flask, Django，那就不必列出你會 Python 把有碰過的技術都寫上去，例如： 僅用過 Java 印出過 \u0026ldquo;Hello World\u0026rdquo; 就在「技能」區塊寫 Java 把專精的技術寫上去就好，怎樣算是專精呢？只要您對於這個技術有信心給面試官隨便問 5 個 Why 你都有信心可以回答就寫上來 未量化你的各經歷的成果，例如： 你曾舉辦過技術工作坊，但你僅僅寫了你任期內舉辦了工作坊 更好的寫法是，你可以告訴我們你舉辦了幾人的 XXX 技術工作坊，觀眾對於您的講評評價高達 4.8/5 分 把自己描述成跨領域通才了，你應要把自己描述成一個專精 XX 技術領域的跨領域人才，例如： 因履歷投遞的職能是「技術支援」，你應該要讓自己成為一個「專精 XX 技術領域的雲端人才，同時附帶了活動規劃的跨領域優勢」 而非把自己寫的什麼都很會，讓人摸不清你到底是來投技術職能還是來投活動規畫職能，又或者讓人覺得你是一個通才 把其他人的貢獻寫在自己的履歷，例如： 你參與了某專案你僅負責後端開發，前端開發部分並非你做的，然而你卻在專案中的經歷寫到你使用了前端的 XXX 技術做了 XXX 功能 申請動機準備方向 申請動機這一塊就有比較多自由發揮的空間 以下就給出兩點簡單的小建議：\n展現您對於雲端技術的學習意願 有建設性的任期規劃 履歷審錄取，進到面試 履歷審查錄取後，就會進去面試這一大關，面試這一大關又分成兩小關\n團體面試 個人面試 面試不開放線上面試！\n當時我通過履歷審，收到的面試通知信件 ↓ 面試服裝 面試服裝沒有強制規定，建議上網搜尋 Smart Casual 穿搭！\n(當然並不是說沒有強制規定就可以穿夾腳拖短褲背心來)\n團體面試 以下題目部分僅供參考，並非每屆的形式、題目都會一模一樣！\n10 人一組，一組裡面一定會有「活動規劃」、「行銷規廣」、「技術支援」的人 一開始先輪流每人 1 分鐘的自我介紹 會有一個面試官在前面說題目，題目通常都是要準備一場活動，然後要我們這一組合作，在時限內從一開始的活動規劃，一直到最後宣傳圖文產出，最後把活動整體的內容和圖文報告給面試官聽 過程中，場邊會有多位面試官，審視大家在團隊中的表現 在尾聲，會再讓每個人輪流發言一次，要告訴面試官在剛剛的過程中自己扮演什麼角色，在團隊中有做出什麼貢獻，一樣限時 1 分鐘 團體面試的一些建議 在一開始時，大家一定都不認識彼此，要開始團隊討論時，往往需要有一個人來破冰，第一個說話的人確實會比較容易令人印象深刻 避免一直搶 Spotlight，想刻意讓大家關注到你，並非在團隊中講越多話就越能受到賞識，話過多但卻沒帶來實質效應可能會帶來反效果 事前訓練自己的表達能力與溝通能力，因為身為技術的你會發現當你要跨團隊與「活動規劃」、「行銷推廣」的組員溝通時，你用太專業的術語對方會聽不懂 個人面試 以下題目部分僅供參考，並非每屆的形式、題目都會一模一樣！\n在履歷審通過後，會收到一封錄取信，通常會在錄取信裡面提及個人面試的題目 題目會給你 AWS 的幾個服務，你挑一個服務，並且在當天給你 8 分鐘介紹 演講形式不拘，所以你要自備紙本講義也沒問題，但我看大多數人都是做 PPT 來介紹 會被安排到一個會議室，裡面有電視可以接你的電腦 (會議室內有 HDMI 線) 面試官會有兩位，以我當時報名 5th 為例：一個是 AWS 的正職、一個是 AWS 雲端大使 Team Lead 8 分鐘時間把服務講解完後，面試官會對你做一些 Q\u0026amp;A，通常會針對你的履歷和剛剛演講的內容來發問 個人面試的一些建議 (重要) 身為技術職能的雲端大使，因為我們在舉辦很多活動時，面對的聽眾很多都沒有專業雲端知識背景，或是雲端小白，如何把一個技術內容講的讓雲端小白都聽得懂的能力相當重要！ 你可以舉一些生活中的真實情境，例如： 我當時講解 DynamoDB ，我用「登入驗證」的這個真實情境，講解 DynamoDB 在這過程中發揮的作用 找一些身邊的朋友，最好找沒有雲端技術背景的人，講解一次給他聽，並汲取對方的回饋來改進 不要引用到一些太難的觀念或是內容 履歷真的不要亂寫，被問到一問三不知就尷尬了 了解 Amazon 領導力準則，在 Q\u0026amp;A 時，讓自己的故事可以跟領導力準則切合 描述自己的故事時善用 STAR 原則 常見問題 我已經把履歷投出去了，現在才看到這篇文章想要重新修改履歷怎麼辦? 直接重新投遞一次就好喔！再次提醒，記得履歷連結要設定成「公開」 報名連結: https://www.surveycake.com/s/DZk3O 面試當天有事，有辦法線上面試嗎? 不行，僅開放實體面試 面試是全英文嗎? 需要準備英文自我介紹嗎? 面試全程皆以中文為主 履歷有規定要用英文嗎? 中文英文皆可！ 結語 希望這篇文章可以幫助到每位想來參加 AWS Educate 雲端大使的人，在這過程中可以積累人脈，體驗外商文化，同時在雲端大使任內也會有其他合作專案像是 DGR, MKT，讓你真的參與 AWS 正職的真實工作環境中！\n6th 雲端大使報名連結: https://www.surveycake.com/s/DZk3O Instagram: https://www.instagram.com/awseducatestdambtw/ Facebook: https://www.facebook.com/awseducatestudentambassadortaiwan/ ","permalink":"https://shiun.me/blog/aws-educate-6th-cloud-ambassador-resume-and-interview-preparation/","summary":"報名流程 履歷及申請動機 本篇文章主要以「技術支援」這個角度來探討履歷準備的方向，當然！這當中肯定有很多方向也是其他職能也可以拿來參考用的。即便您第一志願不是「技術支援」職能，我仍然建議你繼續讀完！\n先來了解 Technical Support (技術支援)這個角色會做哪些事 技術工作坊上台演講並教學雲端技術 提供組內雲端技術的諮詢和建議 撰寫工作坊所需的技術教學文件及應用 履歷準備方向 了解技術支援這個角色會做哪些事，盡可能地在撰寫履歷時，使內容可以讓面試官覺得你很適合這個角色\n教學技術的經驗 上台演講的經驗 技術專案的經驗 有使用到 AWS 尤佳 內容可以和 Amazon 領導力準則掛勾 展現你在技術上的所專精的專業領域，例如：\nAI Data Analysis DevOps \u0026hellip; 展現你的 Leadership 和 Ownership\n量化你的成果\n雲端技術證照\n履歷常見錯誤 ❌ 履歷的大頭照可放可不放，但仍建議不要放，部分職位、傳統台商或特別要求則例外，原因如下： 避免因種族、膚色、人種\u0026hellip; 產生任何 Bias 篇幅過長，超過兩頁 技術方面寫的過多過雜、許多不必要的雜訊，例如： 您有提到您會 Flask, Django，那就不必列出你會 Python 把有碰過的技術都寫上去，例如： 僅用過 Java 印出過 \u0026ldquo;Hello World\u0026rdquo; 就在「技能」區塊寫 Java 把專精的技術寫上去就好，怎樣算是專精呢？只要您對於這個技術有信心給面試官隨便問 5 個 Why 你都有信心可以回答就寫上來 未量化你的各經歷的成果，例如： 你曾舉辦過技術工作坊，但你僅僅寫了你任期內舉辦了工作坊 更好的寫法是，你可以告訴我們你舉辦了幾人的 XXX 技術工作坊，觀眾對於您的講評評價高達 4.8/5 分 把自己描述成跨領域通才了，你應要把自己描述成一個專精 XX 技術領域的跨領域人才，例如： 因履歷投遞的職能是「技術支援」，你應該要讓自己成為一個「專精 XX 技術領域的雲端人才，同時附帶了活動規劃的跨領域優勢」 而非把自己寫的什麼都很會，讓人摸不清你到底是來投技術職能還是來投活動規畫職能，又或者讓人覺得你是一個通才 把其他人的貢獻寫在自己的履歷，例如： 你參與了某專案你僅負責後端開發，前端開發部分並非你做的，然而你卻在專案中的經歷寫到你使用了前端的 XXX 技術做了 XXX 功能 申請動機準備方向 申請動機這一塊就有比較多自由發揮的空間 以下就給出兩點簡單的小建議：","title":"如何成為 AWS Educate 雲端大使？履歷準備、面試技巧大公開"},{"content":"最近在寫 E2E 測試遇到一個問題，因 E2E 專案中，除了專案本身的 Docker Image 需要 Build 之外，還有多個測試環境的 Image 也要 Build，這造成了我在這個專案上需要創建多個 Dockerfile\n發生了什麼問題? 我一開始的錯誤處理方式 菜鳥時期的我，以為 Dockerfile 就是一定得命名為\u0026quot;Dockerfile\u0026quot;，這導致了我沒辦法在專案根目錄下創建三個 Dockerfile，因為會導致命名衝突\n那我想出了什麼處理方式？相當簡單，很菜的我，一開始便自然地根據不同環境在專案下創建了不同的目錄，然後在目錄底下存放各自的 Dockerfile 就很類似這種感覺：\nE2Eproject/ ├── testenvironment1/ │ └── Dockerfile ├── testenvironment2/ │ └── Dockerfile ├── requirements.txt └── Dockerfile 接著便接著發生下一個問題 — 錯誤的建構上下文 以其中一個測試環境內的 Dockerfile 為範例，當時我的寫法如下，請特別注意 COPY ../../ /usr/src/app/ 這行\n# Use the official Python base image from the DockerHub. FROM python:3.12 # Set the working directory within the container. WORKDIR /usr/src/app # Set the PYTHONPATH environment variable. This is where Python looks for modules. # It\u0026#39;s set to the work directory to allow local modules to be found. ENV PYTHONPATH /usr/src/app # Copy the contents of the current host directory into the container\u0026#39;s work directory. COPY ../../ /usr/src/app/ # Install the project dependencies specified in the requirements.txt file. # The --no-cache-dir option is used to disable the cache and reduce the layer size. RUN pip install --no-cache-dir -r ../../requirements.txt # Install additional dependencies for HTML report generation RUN pip install --no-cache-dir pytest-html # Copy the start-tests.sh script into the container\u0026#39;s work directory. COPY start-headless-tests.sh /usr/src/app/ RUN chmod +x /usr/src/app/start-tests.sh # The command to run the application. CMD [\u0026#34;sh\u0026#34;, \u0026#34;/usr/src/app/start-headless-tests.sh\u0026#34;] 會注意到，我使用了 ../../，會這麼寫是因為專案根目錄(或是說打包所需的檔案)都在此 Dockerfile 所處目錄的上面幾層 接著就是很自然的輸入下方指令，然後就出現 ERROR 了：\n$ cd testenvironment1 $ docker build -t e2e-project-testenv:v1 . Dockerfile:16 -------------------- 14 | # Install the project dependencies specified in the requirements.txt file. 15 | # The --no-cache-dir option is used to disable the cache and reduce the layer size. 16 | \u0026gt;\u0026gt;\u0026gt; RUN pip install --no-cache-dir -r ../../requirements.txt 17 | 18 | # Install additional dependencies for HTML report generation -------------------- ERROR: failed to solve: process \u0026#34;/bin/sh -c pip install --no-cache-dir -r ../../requirements.txt\u0026#34; did not complete successfully: exit code: 1 Service \u0026#39;E2E-project\u0026#39; failed to build : Build failed TL;DR Docker 建構上下文就是告訴 Docker 從哪個目錄開始打包檔案，例如：你在執行指令 docker built . 這個 \u0026ldquo;.\u0026rdquo; 就是建構上下文，Docker 會將這個目錄及其子目錄下的所有檔案作為建構上下文打包成 tar 檔案\nDockerfile 與 build image 的上下文目錄不必強關聯在一起\n我們在指令中指定一個目錄作為上下文，然後也透過 -f 參數指定使用哪個建構檔案，並且名稱可以自己任意命名\ndocker build -t e2e-project-testenv:v1 -f testenvironment1/Dockerfile /myapp 先來了解什麼是 Docker 建構上下文 推薦文章：深入理解 docker build 中的建構上下文\n什麼是 Docker 建構上下文(build context) 首先，讓我們簡單回顧一下 Docker 的基本概念。Docker 允許您打包應用程式和所需環境到一個稱為 \u0026ldquo;鏡像\u0026rdquo;(image) 的容器中。這個鏡像可以在任何安裝了 Docker 的系統上運行。\nDocker 建構上下文的概念：\n當您使用 docker build 命令建立 Docker 鏡像時，Docker 會將指定路徑下的檔案和目錄打包成一個 tar 檔案。 這個 tar 檔案被稱為 \u0026ldquo;建構上下文\u0026rdquo;(build context)。 為什麼需要建構上下文：\nDocker 的鏡像是在 Docker 伺服器（通常是遠端伺服器）上建構的。 為了建構鏡像，Docker 伺服器需要訪問到所有必要的檔案，比如源代碼、配置檔案等。 因此，客戶端（您的電腦）會把這些檔案打包成 tar 檔案，然後上傳給伺服器。 Dockerfile 和建構上下文：\nDockerfile 是一個包含了建構鏡像所需步驟的文本檔案。 在 Dockerfile 中，您可以引用建構上下文中的檔案。比如，您可以複製建構上下文中的檔案到鏡像裡，或者執行建構上下文中的腳本。 總結來說，Docker 建構上下文是 Docker 客戶端將建構鏡像所需的檔案打包並傳輸給 Docker 伺服器的過程。這確保了 Docker 伺服器有所有必要的檔案來建構鏡像。\n為何我一開始的處理方式會出現 ERROR? 關鍵就出在：\n當我們執行 docker build -t e2e-project-testenv:v1 .，Docker 客戶端會先將後面的指定路徑(.) 打包成一個 tar 檔案，傳送給 Docker 伺服器端，接著才會根據 Dockerfile 中所定義的腳本進行構建 什麼意思呢？\n我當時執行指令 cd testenvironment1 接著執行 docker build -t e2e-project-testenv:v1 . 事實上就是把 testenvironment1 這個目錄以及其子目錄下的所有檔案打包好，傳送至 Docker Daemon Docker 在 Build 的時候只能取用上下文的檔案，requirements.txt 位於這個目錄的上層(即 E2Eproject 目錄中)，因此它不會被包含在建構上下文中，也就無法在 Dockerfile 中被訪問。 更優雅的處理方式 如果建構鏡像時沒有明確指定 Dockerfile，那麼 Docker Client 默認在建構鏡像時指定的上下文路徑下找名字為 Dockerfile 的建構檔案\n但事實上，Dockerfile 與 build image 的上下文目錄不必強關聯在一起 我們在指令中指定一個目錄作為上下文 然後也透過 -f 參數指定使用哪個建構檔案 並且名稱可以自己任意命名！ 並且名稱可以自己任意命名！！ 並且名稱可以自己任意命名！！！ 這完完全全解惑了我當初菜鳥所以為的「 Dockerfile 就是一定得命名為\u0026quot;Dockerfile\u0026quot;」\n例如：\n$ cd E2Eproject $ docker build -t e2e-project-testenv:v1 -f testenvironment1/Dockerfile . 參考資料 Docker-学习系列25-Dockerfile-中的-COPY-与-ADD-命令.html\n深入理解 docker build 中的建構上下文\n","permalink":"https://shiun.me/blog/a-project-with-multiple-dockerfiles---an-introduction-to-build-context/","summary":"最近在寫 E2E 測試遇到一個問題，因 E2E 專案中，除了專案本身的 Docker Image 需要 Build 之外，還有多個測試環境的 Image 也要 Build，這造成了我在這個專案上需要創建多個 Dockerfile\n發生了什麼問題? 我一開始的錯誤處理方式 菜鳥時期的我，以為 Dockerfile 就是一定得命名為\u0026quot;Dockerfile\u0026quot;，這導致了我沒辦法在專案根目錄下創建三個 Dockerfile，因為會導致命名衝突\n那我想出了什麼處理方式？相當簡單，很菜的我，一開始便自然地根據不同環境在專案下創建了不同的目錄，然後在目錄底下存放各自的 Dockerfile 就很類似這種感覺：\nE2Eproject/ ├── testenvironment1/ │ └── Dockerfile ├── testenvironment2/ │ └── Dockerfile ├── requirements.txt └── Dockerfile 接著便接著發生下一個問題 — 錯誤的建構上下文 以其中一個測試環境內的 Dockerfile 為範例，當時我的寫法如下，請特別注意 COPY ../../ /usr/src/app/ 這行\n# Use the official Python base image from the DockerHub. FROM python:3.12 # Set the working directory within the container. WORKDIR /usr/src/app # Set the PYTHONPATH environment variable.","title":"一個專案需要多個 Dockerfile - 淺談建構上下文 (build context)"},{"content":"大家好我是 Shiun，這篇是我的個人網站的第一篇文章，會記錄我的動機以及現在的時空背景，以此來記錄一下自己的個人成長，未來回頭來看看自己成長多少\n架設網站的動機 動機與原因 會想要架設個人網站主要有以下原因：\n想要記錄自己的個人成長，以及隨手筆記 受到 Nic 的啟發 (Youtube連結)，覺得對於未來職涯的道路上會有所幫助，能夠建立個人品牌，彰顯專業 自己本身就很熱愛分享知識、技術，而且很享受上台演講的氛圍 看起來很帥 2024 年 1 月，下定決心 一直以來都想架一個自己的個人網站，但遲遲一直沒有下手，絕大部分是因為懶 XD，而我一直以來都會把自己的想法紀錄在 Google Keep 或是 Dropbox Paper\n直到 2024/01 下定決心今年的新希望(目標)一定要架好個人網站，開始寫文章，而且我今年(2024)也準備要畢業了，即將面對職場，這時候再不趕快產出有質量的內容就太虧了\n關於我 Hi 我是 Shiun，家裡有兩隻貓(娜娜 \u0026amp; 妮妮😺😺) 我目前就讀於某私立大學的資管系(2024 畢業)，同時也就職於：\nAWS Educate 5th Cloud Ambassador - Technical Support @AWS Backend Engineer Intern @eGroupAI 在 2024 年 3 月要接任：\nAWS Educate 6th Cloud Ambassador Team Lead (技術) @AWS Cloud Engineer Intern @eCloudValley 主要專精於後端與雲端及 DevOps 方面的技術：\nSpring boot Jenkins AWS Docker Selenium Pytest 除此之外，我也很擅長擔任領導者的角色，在求學職涯中，我幾乎都是擔任領導者的職位，像是在大學畢業專題中我也擔任了組長、PM、Product Owner、Backend Development，在畢業專題(作品連結)中上實踐了敏捷式開發(Scrum, Kanban)\n","permalink":"https://shiun.me/blog/my-first/","summary":"大家好我是 Shiun，這篇是我的個人網站的第一篇文章，會記錄我的動機以及現在的時空背景，以此來記錄一下自己的個人成長，未來回頭來看看自己成長多少\n架設網站的動機 動機與原因 會想要架設個人網站主要有以下原因：\n想要記錄自己的個人成長，以及隨手筆記 受到 Nic 的啟發 (Youtube連結)，覺得對於未來職涯的道路上會有所幫助，能夠建立個人品牌，彰顯專業 自己本身就很熱愛分享知識、技術，而且很享受上台演講的氛圍 看起來很帥 2024 年 1 月，下定決心 一直以來都想架一個自己的個人網站，但遲遲一直沒有下手，絕大部分是因為懶 XD，而我一直以來都會把自己的想法紀錄在 Google Keep 或是 Dropbox Paper\n直到 2024/01 下定決心今年的新希望(目標)一定要架好個人網站，開始寫文章，而且我今年(2024)也準備要畢業了，即將面對職場，這時候再不趕快產出有質量的內容就太虧了\n關於我 Hi 我是 Shiun，家裡有兩隻貓(娜娜 \u0026amp; 妮妮😺😺) 我目前就讀於某私立大學的資管系(2024 畢業)，同時也就職於：\nAWS Educate 5th Cloud Ambassador - Technical Support @AWS Backend Engineer Intern @eGroupAI 在 2024 年 3 月要接任：\nAWS Educate 6th Cloud Ambassador Team Lead (技術) @AWS Cloud Engineer Intern @eCloudValley 主要專精於後端與雲端及 DevOps 方面的技術：\nSpring boot Jenkins AWS Docker Selenium Pytest 除此之外，我也很擅長擔任領導者的角色，在求學職涯中，我幾乎都是擔任領導者的職位，像是在大學畢業專題中我也擔任了組長、PM、Product Owner、Backend Development，在畢業專題(作品連結)中上實踐了敏捷式開發(Scrum, Kanban)","title":"這個網站的第一篇文章 - 關於我 以及架站的動機"}]