[{"content":"前言 很多人在初學 Docker 時，通常都會知道 CMD 和 ENTRYPOINT 基本上可以互換，但又覺得很疑惑既然兩個指令能互換為什麼要提供兩個指令給我們用? 但其實這兩者是有一些差異的，今天這篇文章就是來帶你了解 Dockerfile 中的 CMD 和 ENTRYPOINT\nCMD vs ENTRYPOINT 我這邊準備了兩個 Dockerfile，分別使用了 CMD 和 ENTRYPOINT\nFROM ubuntu:22.04 CMD [ \u0026#34;echo\u0026#34;, \u0026#34;Hello from CMD\u0026#34; ] FROM ubuntu:22.04 ENTRYPOINT [ \u0026#34;echo\u0026#34;, \u0026#34;Hello from ENTRYPOINT\u0026#34; ] 接著 build 了兩個 docker image，分別取名為 docker-cmd, docker-entrypoint\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE docker-entrypoint latest fa8ea026cc54 12 days ago 77.9MB docker-cmd latest bd73abaca1f4 12 days ago 77.9MB CMD 會被覆寫、ENTRYPOINT 則不會 理應來說我用 docker-cmd 這個 image 啟動一個容器，會打印出 Hello from CMD，執行結果確實也是如此:\n$ docker run docker-cmd Hello from CMD 但我現在在 docker run 後面加上額外的命令\n例如我額外加上: echo \u0026ldquo;I am shiun\u0026rdquo; 後面額外多加的指令會直接覆蓋掉原本的 CMD 指令，CMD 中的命令就不會被執行: $ docker run docker-cmd echo \u0026#34;I am shiun\u0026#34; I am shiun 同樣在 docker run 後面附加額外命令，如果是 ENTRYPOINT，則不會被覆寫，但是會傳遞給 ENTRYPOINT 作為額外參數\n例如我額外加上: echo \u0026ldquo;I am shiun\u0026rdquo; 這邊額外加上的命令，會被作為參數傳遞給 ENTRYPOINT 命令 注意一下！在這邊的上下文，我所指的「參數」是傳達給命令的額外資訊，用於影響該命令的行為。 參數不一定是選項 （像是 -f 或 -p），它們也可以是其他命令或文本值\n$ docker run docker-entrypoint echo \u0026#34;I am shiun\u0026#34; Hello from ENTRYPOINT echo I am shiun 補充說明: 有注意到引號(\u0026quot;) 不見了嗎? 引號的目的是確保被包含的字符串作為一個整體被傳遞，而不是被看作多個由空格分隔的獨立參數，就像我們在 Python print(\u0026quot;I am shiun\u0026quot;) ， \u0026ldquo;I am shiun\u0026rdquo; 整句被雙引號包裹住，整句會被視為「一個」字串\n由上面的執行結果會看到，我們傳入了兩個參數到 ENTRYPOINT\necho I am shiun 因此 ENTRYPOINT 最後執行的指令其實是:\n$ echo Hello from ENTRYPOINT echo I am shiun 如果兩個同時使用， CMD 會被作為 ENTRYPOINT 的默認參數 這次我再創建一個新的 Dockerfile，我會在該 Dockerfile 內同時使用 CMD 和 ENTRYPOINT\nFROM ubuntu:22.04 CMD [ \u0026#34;echo\u0026#34;, \u0026#34;Hello from CMD\u0026#34; ] # CMD 和 ENTRYPOINT 誰前誰後不影響等下的結果 ENTRYPOINT [ \u0026#34;echo\u0026#34;, \u0026#34;Hello from ENTRYPOINT\u0026#34; ] # CMD 和 ENTRYPOINT 誰前誰後不影響等下的結果 然後我 build 了 Image，取名為 docker-cmd-entrypoint\n馬上來 run 一個容器看看結果:\n$ docker run docker-cmd-entrypoint Hello from ENTRYPOINT echo Hello from CMD 會發現 CMD 原本要執行的指令被當作參數傳遞給 ENTRYPOINT\n要注意的是！！！ CMD 是被當成默認參數傳遞給 ENTRYPOINT 注意！！！是默認(預設)，也就是如果你沒特別指定，那我就默認使用這個值的概念\n讓我們來看一下官方文件的說明:\nCommand line arguments to docker run will be appended after all elements in an exec form ENTRYPOINT, and will override all elements specified using CMD.\n官方文件: https://docs.docker.com/engine/reference/builder/#entrypoint\n因此 ENTRYPOINT 那邊最後實際執行的指令是:\n$ echo Hello from ENTRYPOINT echo Hello from CMD 同時使用 CMD 和 ENTRYPOINT，在 docker run 指令又加上額外的命令 這邊的情境一樣使用到 docker-cmd-entrypoint 這個 Image 但我這次執行 docker run 會在後方附上額外的命令\n完整的指令會長這樣: docker run docker-cmd-entrypoint echo \u0026quot;I am shiun\u0026quot;\n這邊可以先停下來思考一下，回顧前面，特別是官方說明的部分，猜猜看上面的指令執行結果會是如何\nCommand line arguments to docker run will be appended after all elements in an exec form ENTRYPOINT, and will override all elements specified using CMD.\n官方文件: https://docs.docker.com/engine/reference/builder/#entrypoint\n執行結果如下:\n$ docker run docker-cmd-entrypoint echo \u0026#34;I am shiun\u0026#34; Hello from ENTRYPOINT echo I am shiun 由此可知，docker run 後面所附加的額外命令，會覆蓋掉 CMD 的內容，而且會作為參數傳遞至 ENTRYPOINT\n總結 ENTRYPOINT 容器啟動時必須執行的命令 CMD 容器啟動時默認(預設)執行的命令 ENTRYPOINT, CMD 同時使用 CMD 的內容變成 ENTRYPOINT 默認參數 docker run 後面若有附加命令 會覆蓋掉 CMD 的內容，而且會作為參數傳遞至 ENTRYPOINT ","permalink":"https://shiun.me/blog/dockerfile-cmd-vs-entrypoint/","summary":"前言 很多人在初學 Docker 時，通常都會知道 CMD 和 ENTRYPOINT 基本上可以互換，但又覺得很疑惑既然兩個指令能互換為什麼要提供兩個指令給我們用? 但其實這兩者是有一些差異的，今天這篇文章就是來帶你了解 Dockerfile 中的 CMD 和 ENTRYPOINT\nCMD vs ENTRYPOINT 我這邊準備了兩個 Dockerfile，分別使用了 CMD 和 ENTRYPOINT\nFROM ubuntu:22.04 CMD [ \u0026#34;echo\u0026#34;, \u0026#34;Hello from CMD\u0026#34; ] FROM ubuntu:22.04 ENTRYPOINT [ \u0026#34;echo\u0026#34;, \u0026#34;Hello from ENTRYPOINT\u0026#34; ] 接著 build 了兩個 docker image，分別取名為 docker-cmd, docker-entrypoint\n$ docker images REPOSITORY TAG IMAGE ID CREATED SIZE docker-entrypoint latest fa8ea026cc54 12 days ago 77.9MB docker-cmd latest bd73abaca1f4 12 days ago 77.9MB CMD 會被覆寫、ENTRYPOINT 則不會 理應來說我用 docker-cmd 這個 image 啟動一個容器，會打印出 Hello from CMD，執行結果確實也是如此:","title":"Docker 初學常見問題 - CMD vs ENTRYPOINT 兩者的差異與範例"},{"content":"我踩到了什麼坑 本文的背景延續自我之前的文章《一個專案需要多個 Dockerfile - 淺談建構上下文 (build context)》\n因為我們目前經手的專案會需要針對不同環境或是測試 Build 不同的 Image，為了讓目錄架構更具組織性且容易理解，我們根據不同的環境把各個環境的 Dockerfile, docker-compose.yaml, .sh 等等放在各個環境的目錄下，現在的目錄架構大概像這樣 ↓：\nE2Eproject/ ├── testenvironment1/ │ └── Dockerfile ├── testenvironment2/ │ ├── docker-compose.yaml │ └── Dockerfile ├── start-headless-tests.sh └── requirements.txt 由於我正在本地 Debug 這個專案，需要在本地運行 Docker-compose，我便很自然的執行 docker-compose -f ./cicd/headless/docker-compose.yaml up，結果 Docker 容器運行起來時，遇了一個錯誤：/bin/bash: /usr/src/app/cicd/headless/start-headless-tests.sh: No such file or directory。\n這個錯誤讓我想也想不透哪邊出錯，我一開始都是針對 Dockerfile 去做動作，但完全沒有用\n這邊就附上當時錯誤發生時的 Dockerfile 和 docker-compose.yaml，大家可以試著猜猜看是哪個環節導致錯誤！\nE2Eproject/cicd/headless/Dockerfile ↓\n# Dockerfile # Use the official Python base image from the DockerHub. FROM python:3.12 # Set the working directory within the container. WORKDIR /usr/src/app # 略..... # 略..... # 略..... # Copy all files from the current directory on the host to the working directory in the container. # This includes the application source code and any additional required files. COPY . /usr/src/app/ # Copy the start-tests.sh script into the container\u0026#39;s work directory. RUN chmod +x /usr/src/app/start-headless-tests.sh # The command to run the application. CMD [\u0026#34;/bin/bash\u0026#34;, \u0026#34;/usr/src/app/cicd/headless/start-headless-tests.sh\u0026#34;] E2Eproject/cicd/headless/docker-compose.yaml ↓\n# docker-compose.yaml version: \u0026#39;3\u0026#39; services: selenium-hub: # 略 ... chrome-node: # 略 ... E2Eproject: container_name: E2Eproject build: context: ../../ dockerfile: ./cicd/headless/Dockerfile args: NO_CACHE: ${NO_CACHE:-false} depends_on: - selenium-hub networks: - network-grid volumes: - .:/usr/src/app networks: network-grid: Docker Volume 介紹 (Bind Mount vs Volume) 圖片取自：https://docs.docker.com/storage/volumes/\n要解掉這個坑，會牽扯到 Docker Volume 的概念，但本篇踩坑紀錄不會做太深入的講解，就簡單介紹一下\n在 Docker 中，Volume 是用來持久化和共享數據的重要機制。大致上，我們可以將其分為兩類：Bind Mount 和 Volume。今天，我們不打算討論第三種類型，tmpfs mount，因為它與今天的話題不太相關。\nBind Mount 使用時機 Bind Mount 是一種將宿主機(Host)的文件或目錄掛載到容器中的方法。適合以下情況：\n開發階段：當你需要對代碼進行快速迭代時，使用 Bind Mount 可以即時反映宿主機上的更改。 這也是為何我 Debug 時，使用 Bind Mount 的原因，因為我在 Host 上的改動可以立即顯現出來 但這不意味著 Bind Mount 不適合用在 Production 環境，只是 Bind Mount 會依賴宿主機(Host)目錄系統的結構，在安全和一致性上讓你更難處理 日誌文件的處理：將日誌文件直接掛載到宿主機，方便進行日誌的收集和分析。 Volume 使用時機 Volume 則是由 Docker 管理的一種更加隔離和安全的數據持久化方法，官方也推薦使用 Volumes，我這邊就節錄一小段 Docker 官方列舉的優點，詳細可以去看一下官方文件(連結)：\nVolumes are the preferred mechanism for persisting data generated by and used by Docker containers. While bind mounts are dependent on the directory structure and OS of the host machine, volumes are completely managed by Docker. Volumes have several advantages over bind mounts:\nVolumes are easier to back up or migrate than bind mounts. Volumes work on both Linux and Windows containers. You can manage volumes using Docker CLI commands or the Docker API. Volumes can be more safely shared among multiple containers. Volume drivers let you store volumes on remote hosts or cloud p -roviders, encrypt the contents of volumes, or add other functionality. New volumes can have their content pre-populated by a container. Volumes on Docker Desktop have much higher performance than bind mounts from Mac and Windows hosts. 然後我也列舉一些 Volume 適合的情境：\n生產環境：在生產環境中，我們更關注數據的持久化和安全，Volume 提供了更好的隔離。 不希望與宿主機的文件系統直接交互：當需要對數據進行持久化存儲，並且不希望與宿主機的文件系統直接交互時。 相比 Bind Mount，Volume 就不用擔心宿主機因為不同作業系統表示路徑的方式不太一樣，因為 Volume 由 Docker 完全管理，例如： Windows: C:/Users/shiun/Documents/my_folder Mac: C:/Users/shiun/Documents/my_folder Linux: /home/shiun/my_folder 為什麼會發生錯誤 首先一定要了解在 docker-compose.yaml 中，Bind Mount 在指定宿主機的目錄路徑時，路徑的相對路徑是基於 docker-compose.yaml 的所在目錄:\n# 略... volumes: - .:/usr/src/app # \u0026lt;docker-compose.yaml 所處當前目錄路徑\u0026gt;: \u0026lt;容器目標目錄路徑\u0026gt; 再回到我遇到的問題，原因其實很簡單：\n在我使用的 Dockerfile 中，我使用了 COPY . /usr/src/app/ 指令將文件從建構上下文中複製到容器內。 但是，當容器啟動時，docker-compose.yaml 中定義的 volume 又將我本地的 E2Eproject/cicd/headless 目錄掛載到了同一位置。 這導致了容器中的 /usr/src/app 目錄內容被覆蓋，而且 start-headless-tests.sh 腳本並不存在於 E2Eproject/cicd/headless 中，因此容器找不到這個文件，進而出現 /bin/bash: /usr/src/app/cicd/headless/start-headless-tests.sh: No such file or directory 解決方法 解決這個問題其實很簡單：\n註解掉或移除 docker-compose.yaml 的 volume 指令，每一次有 code 改動都重新 Build Image 這樣就不會有掛載覆蓋的問題，畢竟我再 Dockerfile 裡面就有把整個專案目錄 COPY 到 WORKDIR 修改 volumes 設定：將它改為 ../../，這樣就會掛載 E2Eproject 目錄，而不是僅僅掛載 E2Eproject/cicd/headless。 再次提醒，這邊的相對路徑是基於 docker-compose.yaml 的所在目錄 改好的樣子會像這樣：\nE2Eproject/cicd/headless/docker-compose.yaml ↓\n# docker-compose.yaml version: \u0026#39;3\u0026#39; services: # 略... # 略... # 略... E2Eproject: container_name: E2Eproject build: context: ../../ dockerfile: ./cicd/headless/Dockerfile args: NO_CACHE: ${NO_CACHE:-false} depends_on: - selenium-hub networks: - network-grid volumes: - ../../:/usr/src/app # 關鍵修改的地方 networks: network-grid: 當然後續我還有做一些簡單的細節調整，但就不多加贅述，也不影響本篇踩坑紀錄的內容\n若文章內容有誤，歡迎隨時連絡我！你們的回饋對我來說相當重要！\n也歡迎跟我交流或是分享你的想法\n","permalink":"https://shiun.me/blog/docker-overwriting-workdir-contents-with-bind-mounts-at-run-time/","summary":"我踩到了什麼坑 本文的背景延續自我之前的文章《一個專案需要多個 Dockerfile - 淺談建構上下文 (build context)》\n因為我們目前經手的專案會需要針對不同環境或是測試 Build 不同的 Image，為了讓目錄架構更具組織性且容易理解，我們根據不同的環境把各個環境的 Dockerfile, docker-compose.yaml, .sh 等等放在各個環境的目錄下，現在的目錄架構大概像這樣 ↓：\nE2Eproject/ ├── testenvironment1/ │ └── Dockerfile ├── testenvironment2/ │ ├── docker-compose.yaml │ └── Dockerfile ├── start-headless-tests.sh └── requirements.txt 由於我正在本地 Debug 這個專案，需要在本地運行 Docker-compose，我便很自然的執行 docker-compose -f ./cicd/headless/docker-compose.yaml up，結果 Docker 容器運行起來時，遇了一個錯誤：/bin/bash: /usr/src/app/cicd/headless/start-headless-tests.sh: No such file or directory。\n這個錯誤讓我想也想不透哪邊出錯，我一開始都是針對 Dockerfile 去做動作，但完全沒有用\n這邊就附上當時錯誤發生時的 Dockerfile 和 docker-compose.yaml，大家可以試著猜猜看是哪個環節導致錯誤！\nE2Eproject/cicd/headless/Dockerfile ↓\n# Dockerfile # Use the official Python base image from the DockerHub.","title":"Docker 踩坑紀錄 - 運行階段 Bind Mount 覆蓋 WORKDIR 的內容"},{"content":"報名流程 履歷及申請動機 本篇文章主要以「技術支援」這個角度來探討履歷準備的方向，當然！這當中肯定有很多方向也是其他職能也可以拿來參考用的。即便您第一志願不是「技術支援」職能，我仍然建議你繼續讀完！\n先來了解 Technical Support (技術支援)這個角色會做哪些事 技術工作坊上台演講並教學雲端技術 提供組內雲端技術的諮詢和建議 撰寫工作坊所需的技術教學文件及應用 履歷準備方向 了解技術支援這個角色會做哪些事，盡可能地在撰寫履歷時，使內容可以讓面試官覺得你很適合這個角色\n教學技術的經驗 上台演講的經驗 技術專案的經驗 有使用到 AWS 尤佳 內容可以和 Amazon 領導力準則掛勾 展現你在技術上的所專精的專業領域，例如：\nAI Data Analysis DevOps \u0026hellip; 展現你的 Leadership 和 Ownership\n量化你的成果\n雲端技術證照\n履歷常見錯誤 ❌ 履歷的大頭照可放可不放，但仍建議不要放，部分職位、傳統台商或特別要求則例外，原因如下： 避免因種族、膚色、人種\u0026hellip; 產生任何 Bias 篇幅過長，超過兩頁 技術方面寫的過多過雜、許多不必要的雜訊，例如： 您有提到您會 Flask, Django，那就不必列出你會 Python 把有碰過的技術都寫上去，例如： 僅用過 Java 印出過 \u0026ldquo;Hello World\u0026rdquo; 就在「技能」區塊寫 Java 把專精的技術寫上去就好，怎樣算是專精呢？只要您對於這個技術有信心給面試官隨便問 5 個 Why 你都有信心可以回答就寫上來 未量化你的各經歷的成果，例如： 你曾舉辦過技術工作坊，但你僅僅寫了你任期內舉辦了工作坊 更好的寫法是，你可以告訴我們你舉辦了幾人的 XXX 技術工作坊，觀眾對於您的講評評價高達 4.8/5 分 把自己描述成跨領域通才了，你應要把自己描述成一個專精 XX 技術領域的跨領域人才，例如： 因履歷投遞的職能是「技術支援」，你應該要讓自己成為一個「專精 XX 技術領域的雲端人才，同時附帶了活動規劃的跨領域優勢」 而非把自己寫的什麼都很會，讓人摸不清你到底是來投技術職能還是來投活動規畫職能，又或者讓人覺得你是一個通才 把其他人的貢獻寫在自己的履歷，例如： 你參與了某專案你僅負責後端開發，前端開發部分並非你做的，然而你卻在專案中的經歷寫到你使用了前端的 XXX 技術做了 XXX 功能 申請動機準備方向 申請動機這一塊就有比較多自由發揮的空間 以下就給出兩點簡單的小建議：\n展現您對於雲端技術的學習意願 有建設性的任期規劃 履歷審錄取，進到面試 履歷審查錄取後，就會進去面試這一大關，面試這一大關又分成兩小關\n團體面試 個人面試 面試不開放線上面試！\n當時我通過履歷審，收到的面試通知信件 ↓ 面試服裝 面試服裝沒有強制規定，建議上網搜尋 Smart Casual 穿搭！\n(當然並不是說沒有強制規定就可以穿夾腳拖短褲背心來)\n團體面試 以下題目部分僅供參考，並非每屆的形式、題目都會一模一樣！\n10 人一組，一組裡面一定會有「活動規劃」、「行銷規廣」、「技術支援」的人 一開始先輪流每人 1 分鐘的自我介紹 會有一個面試官在前面說題目，題目通常都是要準備一場活動，然後要我們這一組合作，在時限內從一開始的活動規劃，一直到最後宣傳圖文產出，最後把活動整體的內容和圖文報告給面試官聽 過程中，場邊會有多位面試官，審視大家在團隊中的表現 在尾聲，會再讓每個人輪流發言一次，要告訴面試官在剛剛的過程中自己扮演什麼角色，在團隊中有做出什麼貢獻，一樣限時 1 分鐘 團體面試的一些建議 在一開始時，大家一定都不認識彼此，要開始團隊討論時，往往需要有一個人來破冰，第一個說話的人確實會比較容易令人印象深刻 避免一直搶 Spotlight，想刻意讓大家關注到你，並非在團隊中講越多話就越能受到賞識，話過多但卻沒帶來實質效應可能會帶來反效果 事前訓練自己的表達能力與溝通能力，因為身為技術的你會發現當你要跨團隊與「活動規劃」、「行銷推廣」的組員溝通時，你用太專業的術語對方會聽不懂 個人面試 以下題目部分僅供參考，並非每屆的形式、題目都會一模一樣！\n在履歷審通過後，會收到一封錄取信，通常會在錄取信裡面提及個人面試的題目 題目會給你 AWS 的幾個服務，你挑一個服務，並且在當天給你 8 分鐘介紹 演講形式不拘，所以你要自備紙本講義也沒問題，但我看大多數人都是做 PPT 來介紹 會被安排到一個會議室，裡面有電視可以接你的電腦 (會議室內有 HDMI 線) 面試官會有兩位，以我當時報名 5th 為例：一個是 AWS 的正職、一個是 AWS 雲端大使 Team Lead 8 分鐘時間把服務講解完後，面試官會對你做一些 Q\u0026amp;A，通常會針對你的履歷和剛剛演講的內容來發問 個人面試的一些建議 (重要) 身為技術職能的雲端大使，因為我們在舉辦很多活動時，面對的聽眾很多都沒有專業雲端知識背景，或是雲端小白，如何把一個技術內容講的讓雲端小白都聽得懂的能力相當重要！ 你可以舉一些生活中的真實情境，例如： 我當時講解 DynamoDB ，我用「登入驗證」的這個真實情境，講解 DynamoDB 在這過程中發揮的作用 找一些身邊的朋友，最好找沒有雲端技術背景的人，講解一次給他聽，並汲取對方的回饋來改進 不要引用到一些太難的觀念或是內容 履歷真的不要亂寫，被問到一問三不知就尷尬了 了解 Amazon 領導力準則，在 Q\u0026amp;A 時，讓自己的故事可以跟領導力準則切合 描述自己的故事時善用 STAR 原則 常見問題 我已經把履歷投出去了，現在才看到這篇文章想要重新修改履歷怎麼辦? 直接重新投遞一次就好喔！再次提醒，記得履歷連結要設定成「公開」 報名連結: https://www.surveycake.com/s/DZk3O 面試當天有事，有辦法線上面試嗎? 不行，僅開放實體面試 面試是全英文嗎? 需要準備英文自我介紹嗎? 面試全程皆以中文為主 履歷有規定要用英文嗎? 中文英文皆可！ 結語 希望這篇文章可以幫助到每位想來參加 AWS Educate 雲端大使的人，在這過程中可以積累人脈，體驗外商文化，同時在雲端大使任內也會有其他合作專案像是 DGR, MKT，讓你真的參與 AWS 正職的真實工作環境中！\n6th 雲端大使報名連結: https://www.surveycake.com/s/DZk3O Instagram: https://www.instagram.com/awseducatestdambtw/ Facebook: https://www.facebook.com/awseducatestudentambassadortaiwan/ ","permalink":"https://shiun.me/blog/aws-educate-6th-cloud-ambassador-resume-and-interview-preparation/","summary":"報名流程 履歷及申請動機 本篇文章主要以「技術支援」這個角度來探討履歷準備的方向，當然！這當中肯定有很多方向也是其他職能也可以拿來參考用的。即便您第一志願不是「技術支援」職能，我仍然建議你繼續讀完！\n先來了解 Technical Support (技術支援)這個角色會做哪些事 技術工作坊上台演講並教學雲端技術 提供組內雲端技術的諮詢和建議 撰寫工作坊所需的技術教學文件及應用 履歷準備方向 了解技術支援這個角色會做哪些事，盡可能地在撰寫履歷時，使內容可以讓面試官覺得你很適合這個角色\n教學技術的經驗 上台演講的經驗 技術專案的經驗 有使用到 AWS 尤佳 內容可以和 Amazon 領導力準則掛勾 展現你在技術上的所專精的專業領域，例如：\nAI Data Analysis DevOps \u0026hellip; 展現你的 Leadership 和 Ownership\n量化你的成果\n雲端技術證照\n履歷常見錯誤 ❌ 履歷的大頭照可放可不放，但仍建議不要放，部分職位、傳統台商或特別要求則例外，原因如下： 避免因種族、膚色、人種\u0026hellip; 產生任何 Bias 篇幅過長，超過兩頁 技術方面寫的過多過雜、許多不必要的雜訊，例如： 您有提到您會 Flask, Django，那就不必列出你會 Python 把有碰過的技術都寫上去，例如： 僅用過 Java 印出過 \u0026ldquo;Hello World\u0026rdquo; 就在「技能」區塊寫 Java 把專精的技術寫上去就好，怎樣算是專精呢？只要您對於這個技術有信心給面試官隨便問 5 個 Why 你都有信心可以回答就寫上來 未量化你的各經歷的成果，例如： 你曾舉辦過技術工作坊，但你僅僅寫了你任期內舉辦了工作坊 更好的寫法是，你可以告訴我們你舉辦了幾人的 XXX 技術工作坊，觀眾對於您的講評評價高達 4.8/5 分 把自己描述成跨領域通才了，你應要把自己描述成一個專精 XX 技術領域的跨領域人才，例如： 因履歷投遞的職能是「技術支援」，你應該要讓自己成為一個「專精 XX 技術領域的雲端人才，同時附帶了活動規劃的跨領域優勢」 而非把自己寫的什麼都很會，讓人摸不清你到底是來投技術職能還是來投活動規畫職能，又或者讓人覺得你是一個通才 把其他人的貢獻寫在自己的履歷，例如： 你參與了某專案你僅負責後端開發，前端開發部分並非你做的，然而你卻在專案中的經歷寫到你使用了前端的 XXX 技術做了 XXX 功能 申請動機準備方向 申請動機這一塊就有比較多自由發揮的空間 以下就給出兩點簡單的小建議：","title":"如何成為 AWS Educate 雲端大使？履歷準備、面試技巧大公開"},{"content":"最近在寫 E2E 測試遇到一個問題，因 E2E 專案中，除了專案本身的 Docker Image 需要 Build 之外，還有多個測試環境的 Image 也要 Build，這造成了我在這個專案上需要創建多個 Dockerfile\n發生了什麼問題? 我一開始的錯誤處理方式 菜鳥時期的我，以為 Dockerfile 就是一定得命名為\u0026quot;Dockerfile\u0026quot;，這導致了我沒辦法在專案根目錄下創建三個 Dockerfile，因為會導致命名衝突\n那我想出了什麼處理方式？相當簡單，很菜的我，一開始便自然地根據不同環境在專案下創建了不同的目錄，然後在目錄底下存放各自的 Dockerfile 就很類似這種感覺：\nE2Eproject/ ├── testenvironment1/ │ └── Dockerfile ├── testenvironment2/ │ └── Dockerfile ├── requirements.txt └── Dockerfile 接著便接著發生下一個問題 — 錯誤的建構上下文 以其中一個測試環境內的 Dockerfile 為範例，當時我的寫法如下，請特別注意 COPY ../../ /usr/src/app/ 這行\n# Use the official Python base image from the DockerHub. FROM python:3.12 # Set the working directory within the container. WORKDIR /usr/src/app # Set the PYTHONPATH environment variable. This is where Python looks for modules. # It\u0026#39;s set to the work directory to allow local modules to be found. ENV PYTHONPATH /usr/src/app # Copy the contents of the current host directory into the container\u0026#39;s work directory. COPY ../../ /usr/src/app/ # Install the project dependencies specified in the requirements.txt file. # The --no-cache-dir option is used to disable the cache and reduce the layer size. RUN pip install --no-cache-dir -r ../../requirements.txt # 略 ... RUN chmod +x /usr/src/app/start-tests.sh # The command to run the application. CMD [\u0026#34;sh\u0026#34;, \u0026#34;/usr/src/app/start-headless-tests.sh\u0026#34;] 會注意到，我使用了 ../../，會這麼寫是因為專案根目錄(或是說打包所需的檔案)都在此 Dockerfile 所處目錄的上面幾層 接著就是很自然的輸入下方指令，然後就出現 ERROR 了：\n$ cd testenvironment1 $ docker build -t e2e-project-testenv:v1 . Dockerfile:16 -------------------- 14 | # Install the project dependencies specified in the requirements.txt file. 15 | # The --no-cache-dir option is used to disable the cache and reduce the layer size. 16 | \u0026gt;\u0026gt;\u0026gt; RUN pip install --no-cache-dir -r ../../requirements.txt 17 | 18 | # Install additional dependencies for HTML report generation -------------------- ERROR: failed to solve: process \u0026#34;/bin/sh -c pip install --no-cache-dir -r ../../requirements.txt\u0026#34; did not complete successfully: exit code: 1 Service \u0026#39;E2E-project\u0026#39; failed to build : Build failed TL;DR Docker 建構上下文就是告訴 Docker 從哪個目錄開始打包檔案，例如：你在執行指令 docker built . 這個 \u0026ldquo;.\u0026rdquo; 就是建構上下文，Docker 會將這個目錄及其子目錄下的所有檔案作為建構上下文打包成 tar 檔案\nDockerfile 與 build image 的上下文目錄不必強關聯在一起\n我們在指令中指定一個目錄作為上下文，然後也透過 -f 參數指定使用哪個建構檔案，並且名稱可以自己任意命名\ndocker build -t e2e-project-testenv:v1 -f testenvironment1/Dockerfile /myapp 先來了解什麼是 Docker 建構上下文 推薦文章：深入理解 docker build 中的建構上下文\n什麼是 Docker 建構上下文(build context) 首先，讓我們簡單回顧一下 Docker 的基本概念。Docker 允許您打包應用程式和所需環境到一個稱為 \u0026ldquo;鏡像\u0026rdquo;(image) 的容器中。這個鏡像可以在任何安裝了 Docker 的系統上運行。\nDocker 建構上下文的概念：\n當您使用 docker build 命令建立 Docker 鏡像時，Docker 會將指定路徑下的檔案和目錄打包成一個 tar 檔案。 這個 tar 檔案被稱為 \u0026ldquo;建構上下文\u0026rdquo;(build context)。 為什麼需要建構上下文：\nDocker 的鏡像是在 Docker 伺服器（通常是遠端伺服器）上建構的。 為了建構鏡像，Docker 伺服器需要訪問到所有必要的檔案，比如源代碼、配置檔案等。 因此，客戶端（您的電腦）會把這些檔案打包成 tar 檔案，然後上傳給伺服器。 Dockerfile 和建構上下文：\nDockerfile 是一個包含了建構鏡像所需步驟的文本檔案。 在 Dockerfile 中，您可以引用建構上下文中的檔案。比如，您可以複製建構上下文中的檔案到鏡像裡，或者執行建構上下文中的腳本。 總結來說，Docker 建構上下文是 Docker 客戶端將建構鏡像所需的檔案打包並傳輸給 Docker 伺服器的過程。這確保了 Docker 伺服器有所有必要的檔案來建構鏡像。\n為何我一開始的處理方式會出現 ERROR? 關鍵就出在：\n當我們執行 docker build -t e2e-project-testenv:v1 .，Docker 客戶端會先將後面的指定路徑(.) 打包成一個 tar 檔案，傳送給 Docker 伺服器端，接著才會根據 Dockerfile 中所定義的腳本進行構建 什麼意思呢？\n我當時執行指令 cd testenvironment1 接著執行 docker build -t e2e-project-testenv:v1 . 事實上就是把 testenvironment1 這個目錄以及其子目錄下的所有檔案打包好，傳送至 Docker Daemon Docker 在 Build 的時候只能取用上下文的檔案，requirements.txt 位於這個目錄的上層(即 E2Eproject 目錄中)，因此它不會被包含在建構上下文中，也就無法在 Dockerfile 中被訪問。 更優雅的處理方式 如果建構鏡像時沒有明確指定 Dockerfile，那麼 Docker Client 默認在建構鏡像時指定的上下文路徑下找名字為 Dockerfile 的建構檔案\n但事實上，Dockerfile 與 build image 的上下文目錄不必強關聯在一起 我們在指令中指定一個目錄作為上下文 然後也透過 -f 參數指定使用哪個建構檔案 並且名稱可以自己任意命名！ 並且名稱可以自己任意命名！！ 並且名稱可以自己任意命名！！！ 這完完全全解惑了我當初菜鳥所以為的「 Dockerfile 就是一定得命名為\u0026quot;Dockerfile\u0026quot;」\n例如：\n$ cd E2Eproject $ docker build -t e2e-project-testenv:v1 -f testenvironment1/Dockerfile . 參考資料 Docker-学习系列25-Dockerfile-中的-COPY-与-ADD-命令.html\n深入理解 docker build 中的建構上下文\n","permalink":"https://shiun.me/blog/a-project-with-multiple-dockerfiles---an-introduction-to-build-context/","summary":"最近在寫 E2E 測試遇到一個問題，因 E2E 專案中，除了專案本身的 Docker Image 需要 Build 之外，還有多個測試環境的 Image 也要 Build，這造成了我在這個專案上需要創建多個 Dockerfile\n發生了什麼問題? 我一開始的錯誤處理方式 菜鳥時期的我，以為 Dockerfile 就是一定得命名為\u0026quot;Dockerfile\u0026quot;，這導致了我沒辦法在專案根目錄下創建三個 Dockerfile，因為會導致命名衝突\n那我想出了什麼處理方式？相當簡單，很菜的我，一開始便自然地根據不同環境在專案下創建了不同的目錄，然後在目錄底下存放各自的 Dockerfile 就很類似這種感覺：\nE2Eproject/ ├── testenvironment1/ │ └── Dockerfile ├── testenvironment2/ │ └── Dockerfile ├── requirements.txt └── Dockerfile 接著便接著發生下一個問題 — 錯誤的建構上下文 以其中一個測試環境內的 Dockerfile 為範例，當時我的寫法如下，請特別注意 COPY ../../ /usr/src/app/ 這行\n# Use the official Python base image from the DockerHub. FROM python:3.12 # Set the working directory within the container. WORKDIR /usr/src/app # Set the PYTHONPATH environment variable.","title":"一個專案需要多個 Dockerfile - 淺談建構上下文 (build context)"},{"content":"大家好我是 Shiun，這篇是我的個人網站的第一篇文章，會記錄我的動機以及現在的時空背景，以此來記錄一下自己的個人成長，未來回頭來看看自己成長多少\n架設網站的動機 動機與原因 會想要架設個人網站主要有以下原因：\n想要記錄自己的個人成長，以及隨手筆記 受到 Nic 的啟發 (Youtube連結)，覺得對於未來職涯的道路上會有所幫助，能夠建立個人品牌，彰顯專業 自己本身就很熱愛分享知識、技術，而且很享受上台演講的氛圍 看起來很帥 2024 年 1 月，下定決心 一直以來都想架一個自己的個人網站，但遲遲一直沒有下手，絕大部分是因為懶 XD，而我一直以來都會把自己的想法紀錄在 Google Keep 或是 Dropbox Paper\n直到 2024/01 下定決心今年的新希望(目標)一定要架好個人網站，開始寫文章，而且我今年(2024)也準備要畢業了，即將面對職場，這時候再不趕快產出有質量的內容就太虧了\n關於我 Hi 我是 Shiun，家裡有兩隻貓(娜娜 \u0026amp; 妮妮😺😺) 我目前就讀於某私立大學的資管系(2024 畢業)，同時也就職於：\nAWS Educate 5th Cloud Ambassador - Technical Support @AWS Backend Engineer Intern @eGroupAI 在 2024 年 3 月要接任：\nAWS Educate 6th Cloud Ambassador Team Lead (技術) @AWS Cloud Engineer Intern @eCloudValley 主要專精於後端與雲端及 DevOps 方面的技術：\nSpring boot Jenkins AWS Docker Selenium Pytest 除此之外，我也很擅長擔任領導者的角色，在求學職涯中，我幾乎都是擔任領導者的職位，像是在大學畢業專題中我也擔任了組長、PM、Product Owner、Backend Development，在畢業專題(作品連結)中上實踐了敏捷式開發(Scrum, Kanban)\n","permalink":"https://shiun.me/blog/my-first/","summary":"大家好我是 Shiun，這篇是我的個人網站的第一篇文章，會記錄我的動機以及現在的時空背景，以此來記錄一下自己的個人成長，未來回頭來看看自己成長多少\n架設網站的動機 動機與原因 會想要架設個人網站主要有以下原因：\n想要記錄自己的個人成長，以及隨手筆記 受到 Nic 的啟發 (Youtube連結)，覺得對於未來職涯的道路上會有所幫助，能夠建立個人品牌，彰顯專業 自己本身就很熱愛分享知識、技術，而且很享受上台演講的氛圍 看起來很帥 2024 年 1 月，下定決心 一直以來都想架一個自己的個人網站，但遲遲一直沒有下手，絕大部分是因為懶 XD，而我一直以來都會把自己的想法紀錄在 Google Keep 或是 Dropbox Paper\n直到 2024/01 下定決心今年的新希望(目標)一定要架好個人網站，開始寫文章，而且我今年(2024)也準備要畢業了，即將面對職場，這時候再不趕快產出有質量的內容就太虧了\n關於我 Hi 我是 Shiun，家裡有兩隻貓(娜娜 \u0026amp; 妮妮😺😺) 我目前就讀於某私立大學的資管系(2024 畢業)，同時也就職於：\nAWS Educate 5th Cloud Ambassador - Technical Support @AWS Backend Engineer Intern @eGroupAI 在 2024 年 3 月要接任：\nAWS Educate 6th Cloud Ambassador Team Lead (技術) @AWS Cloud Engineer Intern @eCloudValley 主要專精於後端與雲端及 DevOps 方面的技術：\nSpring boot Jenkins AWS Docker Selenium Pytest 除此之外，我也很擅長擔任領導者的角色，在求學職涯中，我幾乎都是擔任領導者的職位，像是在大學畢業專題中我也擔任了組長、PM、Product Owner、Backend Development，在畢業專題(作品連結)中上實踐了敏捷式開發(Scrum, Kanban)","title":"這個網站的第一篇文章 - 關於我 以及架站的動機"}]